#Import Packages Needed
import time
import board
import adafruit_icm20x
from adafruit_icm20x import MagDataRate
import numpy as np
import imufusion
import math
import asyncio
import moteus

#Pin Breakout for Raspberry Pi and ICM20948 IMU
    #Red is 3V
    #Black is Ground
    #Yellow is SCL
    #Orange is SDA

async def main():
    #Establish I2C Protocol
    i2c = board.I2C()

    #Define Accelerometer
    imu = adafruit_icm20x.ICM20948(i2c)

    #Intialize IMU
    SamplingFrequency = 100
    gyro_offset, accel_offset, mag_offset = intializeIMU(imu,sampling_rate = SamplingFrequency)

    #Create AHRS Filter
    ahrs = imufusion.Ahrs()
    
    #Establish Intial Conditions
    error = [0, 0, 0]
    desiredRollRate = [0, 0, 0]

    #Numerator and Denominators for Transfer Function
    num = [0.0299, -0.0356, -0.0356]
    den = [1, -1.9335, -1.9335]

    #Moment Of Interia Values
    Ir = 5.18
    J = 0.753

    #Intitialize Motor
    c = moteus.Controller()
    await c.set_stop()

    #Maximum Wheel Velocity (Hz)
    maxVelocity = 30


    #System Is Activated Control Loop Will Begin
    print("Activated")

    #Set Last Gyro Poll Time
    last_gyro_poll = time.perf_counter()

    #Intialize Current Attitude (Degs)
    currentAttitude = 0

    #Set Desired Attitude (Degs)
    desiredAttitude = 90

    while True:
        #Retreieve IMU Data
        rollRate = getRollRate(imu,gyro_offset)
        #Set New Gyro Poll Time
        new_gyro_poll = time.perf_counter()
        #Calculate Current Attitude
        currentAttitude += rollRate * (new_gyro_poll-last_gyro_poll)
        #Calculate Error
        error[0] = desiredAttitude - currentAttitude
        #Calculate Desired System Angular Velocity



        #Calculate System Roll Rate
        uterms = num[0] * error[0] + num[1] * error[1] + num[2] * error[2]
        yterms = den[1] * desiredRollRate[1] + den[2] * desiredRollRate[2]
        desiredRollRate[0] = uterms - yterms
        #Calculate Motor Velocity (Hz)
        deltaMotorVelocity = desiredRollRate * Ir/J 
        motorVelocity += deltaMotorVelocity
        #Define Maximum Motor Velocity to Establish Wheel Saturation
        if motorVelocity > maxVelocity:
            motorVelocity = maxVelocity
        elif motorVelocity<-maxVelocity:
            motorVelocity = -maxVelocity

        #Send Velocity Command to the Motor
        await c.set_position(position=math.nan,maximum_torque = 1.5, velocity = motorVelocity, accel_limit = 40.0)
        
        #Update Error
        error[2] = error[1]
        error[1] = error[0]
        #Update desiredRoll Rate
        desiredRollRate[2] = desiredRollRate[1]
        desiredRollRate[1] = desiredRollRate[0]

        #Update Last Gyro Poll Time
        last_gyro_poll = new_gyro_poll

#Input: IMU and Desired Samples Per Second
#Return: Offsets for Gyro, Accel, and Mag
def intializeIMU(imu,sampling_rate = 100):
    #Set Sampling Rates (Number of Samples/second)
    imu.gyro_data_rate = sampling_rate
    imu.accelerometer_data_rate = sampling_rate
    #Set Magnetometer to Maximum Sampling Rate of 100 Hz
    imu.magnetometer_data_rate = MagDataRate.RATE_100HZ

    #Rolling Average Error Compensation
    num_samples = 1000
    #Allocate Arrays
    gyro_offset = np.zeros(3)
    accel_offset = np.zeros(3)
    mag_offset = np.zeros(3)
    #Loop Through the Number of Samples
    for i in range(num_samples):
        gx, gy, gz = imu.gyro
        gyro_offset += np.array([gx, gy, gz])
   
        ax, ay, az = imu.acceleration
        accel_offset += np.array([ax, ay, az])
   
        mx, my, mz = imu.magnetic
        mag_offset += np.array([mx, my, mz])
    
        #Average the offsets
        gyro_offset /= num_samples
        accel_offset /= num_samples
        mag_offset /= num_samples

    return [gyro_offset, accel_offset, mag_offset]
 
#Return Arrays of Gyro, Accel and Mag Data
def getIMUData(imu, gyro_offset, accel_offset, mag_offset):
    #Get Gyro Data and Apply Offset
    gx, gy, gz = imu.gyro
    gx -= gyro_offset[0]
    gy -= gyro_offset[1]
    gz -= gyro_offset[2]
    #Convert Gyro Data to Deg/s
    gx *= 180 / math.pi
    gy *= 180 / math.pi
    gz *= 180 / math.pi

    #Get Accel Data and Apply Offset
    ax, ay, az = imu.acceleration
    ax -= accel_offset[0]
    ay -= accel_offset[1]
    az -= accel_offset[2] - 9.081  # Gravity compensation
    #Convert Accel Data to Gs
    ax /= 9.801
    ay /= 9.801
    az /= 9.801

    #Get Mag Data
    mx, my, mz = imu.magnetic
    mx -= mag_offset[0]
    my -= mag_offset[1]
    mz -= mag_offset[2]

    #Return Data In Arrays
    gyro_data = np.array([gx, gy, gz])
    accel_data = np.array([ax, ay, az])
    mag_data = np.array([mx, my, mz])
    return [gyro_data, accel_data, mag_data]

#Returns Gz
def getRollRate(imu,gyro_offset):
    #Get Roll Rate
    gz = imu.gyro[2]
    #Apply Offset
    gz -= gyro_offset[2]
    #Convert to Deg/s
    gz *= 180 / math.pi
    return gz


if __name__ == '__main__':
    asyncio.run(main())
